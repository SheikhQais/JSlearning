Callback And Pyramids of Doom.

    Callback:
        Callback is the function that is passed in the another function as an argument which is then invoked inside
        the outer function to complete an action.
    
    Callback Hell & Pyramids of Doom:
        When we have Callback insidem the Callbacks, the code gets difficult to manage.
        As Callbacks become more nested, the code becomes deeper and increasingly more difficult to manage,
        especially if we have real code instead of repeated statements of the outer functions in nested functions.

    
Practical Code Question:

Problem: Write a JavaScript function called filterArray that takes an array of numbers and a callback function as arguments. The function should filter the array based on the callback's criteria and return a new array containing only the elements that meet the criteria.

Requirements:

filterArray should take an array of numbers and a callback function as arguments.

The callback function should define the criteria for filtering elements. It should take a single number as an argument and return true if the number meets the criteria and false otherwise.

filterArray should apply the callback to each element in the input array and return a new array containing only the elements for which the callback returns true.

Theoretical Questions:


1. What is a callback function in JavaScript, and how does it differ from a regular function?

A callback function in JavaScript is a function that is passed as an argument to another function and is intended to be executed after the completion of that function. Callback functions are a common feature in JavaScript, used to enable asynchronous operations, handle events, and perform tasks that rely on the completion of other operations. They are often used to provide a way to respond to and process the result of an asynchronous operation, such as data retrieval from a server.
The key difference between a callback function and a regular function is in how they are used. Callback functions are not executed immediately when defined but are rather "called back" at a later point, typically in response to a specific event or operation. Regular functions, on the other hand, are called and executed directly.


2. Why are callback functions important in asynchronous JavaScript programming, and what role do they play in handling events and asynchronous tasks?

Callback functions are essential in asynchronous JavaScript programming because they enable non-blocking, event-driven behavior. In asynchronous programming, operations may take some time to complete (e.g., network requests, file I/O), and the program cannot afford to wait for them to finish without freezing or blocking the user interface.
Callback functions allow developers to specify what should happen after an asynchronous operation completes, and they are often used with event listeners, timers (e.g., setTimeout), and AJAX requests. Callbacks enable the program to continue executing other tasks while waiting for the asynchronous operation to finish. This asynchronous and non-blocking behavior is critical for creating responsive and efficient web applications.


3. Explain the concept of a "higher-order function" and how it relates to callback functions. Provide an example of a higher-order function that takes a callback as an argument.
A higher-order function is a function that takes one or more functions as arguments and/or returns a function as its result. These functions are considered "higher-order" because they operate at a higher level of abstraction, using other functions as building blocks. Higher-order functions are a powerful concept in functional programming and are closely related to the use of callback functions.


4. What is the purpose of the Array.prototype.map function, and how can you use a callback with it? Provide an example of using map to transform an array using a callback.

The Array.prototype.map function is a built-in JavaScript method that is used to transform the elements of an array. It creates a new array by applying a provided callback function to each element of the original array. The key purpose of map is to modify the elements of an array without changing the original array.


5. In what scenarios might you encounter "callback hell" or "pyramid of doom," and how can you address this issue when dealing with multiple nested callbacks in JavaScript?

"Callback hell" or the "pyramid of doom" is a common issue encountered when dealing with multiple nested callback functions, especially in asynchronous code. It occurs when there are numerous nested callbacks within callbacks, making the code structure difficult to read and maintain.

You might encounter this issue when handling complex asynchronous operations like multiple database queries, nested HTTP requests, or deeply nested event-driven code.

To address this problem and write more maintainable code, you can employ techniques such as:

Using named or anonymous functions to improve readability.
Breaking complex operations into separate functions.
Using Promises or the async/await syntax to make asynchronous code appear more synchronous and less nested.
Organizing code into modules or using modern JavaScript tools like Babel for improved code structuring.
These practices help mitigate the "callback hell" problem and make the code more manageable and maintainable, especially when dealing with complex asynchronous scenarios.